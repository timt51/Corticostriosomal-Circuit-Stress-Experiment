function [T, pl_spikes, strio_response, swn_response] = hh_model(PL_signal_type, num_pl, num_strio, num_swn, ...
                                                                 pl_strio_gsyn, pl_swn_gsyn, swn_strio_gsyn, ...
                                                                 tmin, tmax, db_type, twdb, cb_pls_ids)
% HH_MODEL returns the spike times of striosomes and SWNs generated by our
% model of the corticostriosomal circuit. The model takes as input a PL
% signal, which are spikes coming from the prefrontal cortex. There are
% various PL signal types, as described below.
%
% Inputs are:
%  PL_SIGNAL_TYPE - Can be 1, 2, or 3:
%                 1. PL spikes occur sequentially. That is, for each PL
%                 neruon in the model, the neurons fire once, one after the
%                 other.
%                 2. PL spikes occur simultaneously. That is, all PL
%                 neurons in the model fire at once, at the same time.
%                 3. PL spikes are real PL spikes recorded from PL neurons
%                 in the database.
%  NUM_PL         - the number of PL neurons in the model
%  NUM_STRIO      - the number of striosomes in the model
%  NUM_SWN        - the number of SWNs in the model
%  PL_STRIO_GSYN  - the strength of the connectivity between PL neruons and
%                 striosomes in the model
%  PL_SWN_GSYN    - the strength of the connectivity between PL neruons and
%                 SWNs in the model
%  SWN_STRIO_GSYN - the strength of the connectivity between SWNs and
%                 striosomes in the model
%  TMIN           - if PL_SIGNAL_TYPE is 3, specifies the minimum time at
%                 which a real PL spike occurs in a trial to be considered 
%                 as input to the model. 
%  TMAX           - if PL_SIGNAL_TYPE is 3, specifies the maximum time at
%                 which a real PL spike occurs in a trial to be considered 
%                 as input to the model. 
%  DB_TYPE        - the name of the database from which the real PL data is
%                 coming from
%                   ------ I'm not sure what's value of the argument DB_TYPE, is it number or charactor?
%
%  TWDB           - the database from which the real PL data is coming from
%  CB_PLS_IDS     - the indicies in TWDB corresponding to cost benefit PLs
%                 neruons
%                   ------ Do you have details of this argument? I cannot find it in the online data of Cell paper. Thanks!
%
% Outputs are:
%  T              - the time points at which the model produces an output
%                 potential
%  PL_SPIKES      - the spikes times of PL neruons in the model
%  STRIO_RESPONSE - the potential (mV) of striosomes as a function time
%  SWN_RESPONSE   - the potential (mV) of SWNs as a function of time

clear Nneur Nsyn
tic
rng('shuffle')

timeline = tmin:tmax;
samppersec = 1000;

% Parameters of PL signals
clear PL
PL.signaltype = PL_signal_type; % Case 1: PL neurons are sequentially active. Case 2: PL neurons are all stimulated at one timepoint.
Nneur.PL = num_pl;
PL.spikedur = 1; % ms
PL.stimtime = round(0.2*tmax); % ms
PL.phasicspikefreq = 10; % Hz
PL.tonicspikefreq = 0; % Hz
PL = repmat(PL,1,Nneur.PL);
for i = 1:Nneur.PL
    PL(i).phasicstart = ceil(((i-1)/Nneur.PL)*tmax); % ms
    PL(i).phasicend = floor(((i)/Nneur.PL)*tmax);
end

% Parameters of SPN neurons
clear SPN
Nneur.SPN = num_strio;
SPN.Isyn = 0; % uA/cm^2
SPN.IDC = 0; % uA/cm^2
SPN.ENa = 115; % mV
SPN.EK = -12; % mV
SPN.EL = 10.6; % mV
SPN.gNa = 120; % mS/cm^2
SPN.gK = 36; % mS/cm^2
SPN.gL = 0.3; % mS/cm^2
SPN.C = 1; % uF/cm^2
SPN.Vshift = -70; % mV

% Parameters of HFN neuron
clear HFN
Nneur.HFN = num_swn;
HFN.Isyn = 0; % uA/cm^2
HFN.IDC = SPN.IDC; % uA/cm^2
HFN.ENa = SPN.ENa; % mV
HFN.EK = SPN.EK; % mV
HFN.EL = SPN.EL; % mV
HFN.gNa = SPN.gNa; % mS/cm^2
HFN.gK = SPN.gK; % mS/cm^2
HFN.gL = SPN.gL; % mS/cm^2
HFN.C = SPN.C; % uF/cm^2
HFN.Vshift = SPN.Vshift; % mV

% Parameters of PL to SPN synapses
Nsyn.syn12 = Nneur.PL;
clear syn12
% syn12.gsyn = pl_strio_gsyn; % 0.3; %0.2; % mS/cm^2
syn12.Tmax = 1.5; % mM
syn12.Erev = 0; % mV
syn12.alpha = 1.1; % 0.1; % 1.1; % mM^-1 ms^-1
syn12.beta = 0.19; % 0.01; % 0.19; % ms^-1
syn12.T = NaN;
syn12.rdot = NaN;
syn12 = repmat(syn12,1,Nsyn.syn12);
for i = 1:Nsyn.syn12
    syn12(i).gsyn = max(0,random(pl_strio_gsyn));
end

% Parameters of PL to HFN synapses
Nsyn.syn13 = Nneur.PL;
clear syn13
syn13.Tmax = syn12.Tmax; % mM
syn13.Vp = 2; % mV
syn13.Kp = 5; % mV
syn13.Erev = syn12.Erev; % mV
syn13.alpha = syn12.alpha; % mM^-1 ms^-1
syn13.beta = syn12.beta; % ms^-1
syn13.T = NaN;
syn13.rdot = NaN;
syn13 = repmat(syn13,1,Nsyn.syn13);
for i = 1:Nsyn.syn13
    syn13(i).gsyn = pl_swn_gsyn; % mS/cm^2
end

% Parameters of HFN to SPN synapses
Nsyn.syn32 = Nneur.HFN;
clear syn32
syn32.Tmax = syn13.Tmax; % mM
syn32.Vp = syn13.Vp; % mV
syn32.Kp = syn13.Kp; % mV
syn32.Erev = -80; % mV
syn32.alpha = 5.0; % 0.1; % 5.0; % mM^-1 ms^-1
syn32.beta = 0.18; % 0.01; % 0.18; % ms^-1
syn32.T = NaN;
syn32.rdot = NaN;
syn32 = repmat(syn32,1,Nsyn.syn32);
for i = 1:Nsyn.syn32
%     syn32.gsyn = 1.05; % 1.05; 0.1; % mS/cm^2
    syn32(i).gsyn = swn_strio_gsyn; % mS/cm^2
end

% Additional SPN neuron fields
SPN.SumI = NaN;
SPN.alphan = NaN;
SPN.alpham = NaN;
SPN.alphah = NaN;
SPN.betan = NaN;
SPN.betam = NaN;
SPN.betah = NaN;
SPN.mdot = NaN;
SPN.ndot = NaN;
SPN.hdot = NaN;
SPN.udot = NaN;

% Additional HFN neuron fields
HFN.SumI = NaN;
HFN.alphan = NaN;
HFN.alpham = NaN;
HFN.alphah = NaN;
HFN.betan = NaN;
HFN.betam = NaN;
HFN.betah = NaN;
HFN.mdot = NaN;
HFN.ndot = NaN;
HFN.hdot = NaN;
HFN.udot = NaN;


% SPN structure array
SPN = repmat(SPN,1,Nneur.SPN);
HFN = repmat(HFN,1,Nneur.HFN);

% Synapse structure arrays
syn12 = repmat(syn12,1,Nsyn.syn12);
syn32 = repmat(syn32,1,Nsyn.syn32);

Nneur.total = Nneur.SPN + Nneur.HFN;
Nsyn.total = Nsyn.syn12 + Nsyn.syn13 + Nsyn.syn32;
pls_neruon_ids = datasample(1:length(cb_pls_ids{db_type}),Nneur.PL,'Replace',true);
for i = 1:Nneur.PL
    if PL(i).signaltype == 1
        [PL(i).phasic,PL(i).spike] = hh_PLsignal1(timeline, samppersec, PL(i).spikedur, PL(i).phasicstart, PL(i).phasicend, PL(i).phasicspikefreq, PL(i).tonicspikefreq);
    elseif PL(i).signaltype == 2
        [PL(i).spike] = hh_PLsignal2(timeline, PL(i).spikedur, PL(i).stimtime);
    elseif PL(i).signaltype == 3
        neuron_num = pls_neruon_ids(i);
        [PL(i).spike] = hh_PLsignal3(timeline, PL(i).spikedur, twdb, db_type, cb_pls_ids, neuron_num);
    end
end
Y0 = hh_Y0(Nneur,Nsyn,SPN);
connected_SPN_idxs = arrayfun(@(x) datasample(1:Nsyn.syn12,2,'Replace',false),1:Nneur.SPN,'uni',false);
[T,Y] = ode45(@hh_ode,[tmin tmax],Y0,[],timeline,Nneur,Nsyn,PL,SPN,HFN,syn12,syn13,syn32,connected_SPN_idxs);
[SPN,HFN,syn12,syn13,syn32] = hh_bigYmap(Y,Nneur,Nsyn,SPN,HFN,syn12,syn13,syn32);

toc

pl_spikes = arrayfun(@(x) syn12(x).Tmax.*PL(x).spike,1:length(PL), 'uni', false);
strio_response = {SPN.u_all};
swn_response = {HFN.u_all};
end
